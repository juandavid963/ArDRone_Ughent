#include "ardrone/ardrone.h"
#define KEY_DOWN(key) (GetAsyncKeyState(key) & 0x8000);
#define KEY_PUSH(key) (GetAsyncKeyState(key) & 0x0001);
// %%%%%%%%%%%%%%%%%%%%%%
// %%%%  Variables  %%%%%
// %%%%%%%%%%%%%%%%%%%%%%

// ArDrone
ARDrone ardrone;								// ARDrone type
int option;										// option to run the program

// time variables
int ts=33;										// sample time [ms]
int kwait=0;									// time between frames (32)
clock_t startClock,finishClock,diff_1,diff_2;	// control time variables

// pant and image variables
int x_pant, y_pant;								// pant size [px]								
CvSize size_image;								// image size (width,height)
int x_ima, y_ima;								// image size [px]

// reference point and correction
CvPoint ref;									// reference point for control
CvPoint correct_ref;							// reference correction

// relationship between pixels and meters
double rate1;									// image meter by ArDrone heigh in meters (m/m)
double rate2;									// rate (px/m)
double rate3;									// rate referenced by the square (cm/px)

// text variables .txt
FILE *fp;										// text file
char txtfilename[20];							// text file name
char txt_buffer[200];							// text buffer
clock_t time_count=0;							// time counter
int column_count=0;								// column counter
int file_count=0;								// file counter

// photos variables
int photo_count=0;								// photo counter 
char photoname[20];								// photo name

// video recording variables
int flag1_video=0;								// flag1 video to initialize the video recording
int flag2_video=0;								// flag2 video to record video
CvVideoWriter *video;							// initialize video file writer
char videofilename[40];							// video file name
SYSTEMTIME file_date;							// get date and time to write the file name

// motion variables for the ArDrone (systems inputs)
double pitch_in=0.0;							// pitch angle input, normalized data between [-1 1]
double roll_in=0.0;								// roll angle input, normalized data between [-1 1]
double vz_in=0.0;								// z axis speed, lifting speed, normalized data between [-1 1]
double vr_in=0.0;								// r axis speed, rotation speed, normalized data between [-1 1]
double pond;

// navigation data from the ArDrone (systems outputs)
int battery;									// battery level in percent [0-100 %]
double pitch_out;								// pitch angle [deg]
double roll_out;								// roll angle [deg]
double yaw_out;									// yaw angle [deg]
double altitude_out;							// altitude [m]
double speed_out;					 			// average speed in all three axes
double vx_out, vy_out, vz_out;					// speed in each axis x,y,z [m/s] (speed_z no return)

// control Board for the ArDrone : trackbar
int TB_camera=1;								// [0 1] bottom camera, top camera
int TB_landing=0;								// [0 1] take off, land
int TB_pitch_angle=1;							// [-1 0 1] pitch angle 
int TB_roll_angle=1;							// [-1 0 1] roll angle 
int TB_vz=1;									// [-1 0 1] vz 
int TB_vr=1;									// [-1 0 1] vr 
int TB_move_3d=1;								// [0 1] enable and disable motion

// image and video variables
IplImage *image;								// original image 
IplImage *hsv;									// image in hsv format 
IplImage *grayscale;							// image in grayscale
IplImage *b_w1;									// image in black & white by Segmentation Color
IplImage *b_w2;									// image in black & white by Segmentation grayscale
IplImage *filter_1;								// filtered image 
IplImage *edges;								// edged image
IplImage *edit_1;								// edited image
IplImage *Equali;								// equalized image by histogram
IplImage *affine_t;								// transformed image (deformation,scale,rotation)
IplImage *I_contours;							// contoured image
IplImage *I_contours_aprox;						// contoured approximate image
IplImage *I_contours_analy;						// contoured analyzed image
CvCapture *capture;								// to capture video

// editing variables
int band_edition_1;								// enable or disable editing
CvScalar red=CV_RGB(250,0,0);					// red color
CvScalar green=CV_RGB(0,250,0);					// green color
CvScalar blue=CV_RGB(0,0,250);					// blue color
CvScalar white=CV_RGB(255,255,255);				// white color
CvScalar black=CV_RGB(0,0,0);					// black color
int minH=0,maxH=100;							// H range to binarizing image
int minS=0,maxS=200;							// S range to binarizing image
int minV=0,maxV=255;							// V range to binarizing image
CvScalar lower=cvScalar(minH,minS,minV);		// minimum range 
CvScalar upper=cvScalar(maxH,maxS,maxV);		// maximum range
int thresh=207;									// threshold from grayscale to black and white image
int canny1=100, canny2=10;						// canny edge thresholds
int ite=1;										// interactions to erode and dilate
int filter_i=2;									// filter parameter
CvMat* warp_mat=cvCreateMat(2,3,CV_32FC1);		// affine transform matrix (deformation)
CvMat* rot_mat=cvCreateMat(2,3,CV_32FC1);		// affine transform matrix (scale and rotation)
CvPoint2D32f srcTri[3],dstTri[3];				// three points for the deformation
double angle=0.0,scale=1.0;						// angle and scale value [°deg]
CvPoint2D32f center_affine;						// center point for rotation

// contour variables
CvSeq *contours_origi;							// original contours
CvSeq *contours_aprox;							// polynomial approximate contours
CvSeq *contours_copy,*contours_analy;			// contour analysis, copy required
CvMemStorage* g_storage=cvCreateMemStorage(0);	// memory storage for the contours
int Nc=0;										// number of contours
int N_aprox=7;									// type of polynomial approximation
int N_circles=0;								// number of circles inside the each square
double area=0,real_area=0;						// contour area [px^2] and contour real area [m^2]
CvPoint* circle_position;						// position of each circle
CvBox2D square_1;								// square box to get the height, width and the center
CvBox2D square_2;								// box for the center circle to get the orientation reference
double dist_pts;								// distance between two points
double angulo;									// angle of each square

//drawing variables
CvFont text_font;								// text font to put in the image
CvPoint pt1,pt2;								// center points to put circles and shapes
char *text,text_1[100];							// text to put in the image

// %%%%%%%%%%%%%%%%%%%%%%
// %%%%%  Funtions  %%%%%
// %%%%%%%%%%%%%%%%%%%%%%
void ts_control(void) // time control
	{
		finishClock = clock();													// end of the cycle
		// Look out! in these lines we have a slight time error
		diff_1=difftime(finishClock, startClock);								// cycle time without delay
		if(diff_1<ts) {msleep(ts-diff_1);}										// add remainder time to be the setpoint (ts)
		finishClock = clock();													// new end of the cycle
		diff_2=difftime(finishClock, startClock);								// cycle time without delay (real)
		// Look out! in these lines we have a slight time error
		startClock = clock();													// start of the cycle
	}

void write_txt(int i) // text file to save the measurements
	{
		switch(i)
			{
				case 0: sprintf(txtfilename,"C:/data_%d.txt",file_count);						// text file name
						fp=fopen(txtfilename,"w+");												// open file to create
						column_count=0;															// column counter initializing
						break;

				case 1:	sprintf(txt_buffer,"%d	%d	%d	%d	%d	%d	%3.3f	%3.3f	%3.3f	%3.3f	%3.3f	%3.3f	%3.3f	%3.3f	%d	%3.3f	%3.3f	%3.3f	%3.3f\n",time_count,diff_1,diff_2,ts,option,file_count,real_area,pitch_out,roll_out,yaw_out,altitude_out,vx_out,vy_out,vz_out,battery,pitch_in,roll_in,vz_in,vr_in);	// ordered data in each column
						time_count=time_count+ts;												// time counter runs (ideal)
						//time_count=time_count+diff_2;											// time counter runs (real)
						column_count++;															// column counter runs
						fp=fopen(txtfilename,"r+");												// open file for writing
						fseek(fp,0,SEEK_END);													// it's positioned at the end of the file
						fprintf(fp,txt_buffer);													// writes in the text file
						fclose(fp);																// close file
						break;
				
				case 2:	file_count++;															// increase file counter
						sprintf(txt_buffer,"%d	%d	%d	%d	%d	%d	%3.3f	%3.3f	%3.3f	%3.3f	%3.3f	%3.3f	%3.3f	%3.3f	%d	%3.3f	%3.3f	%3.3f	%3.3f\n",time_count,diff_1,diff_2,ts,option,file_count,real_area,pitch_out,roll_out,yaw_out,altitude_out,vx_out,vy_out,vz_out,battery,pitch_in,roll_in,vz_in,vr_in);	// write the last column to reference the following file
						fp=fopen(txtfilename,"r+");												// open file for writing
						fseek(fp,0,SEEK_END);													// it's positioned at the end of the file
						fprintf(fp,txt_buffer);													// writes in the text file
						fclose(fp);																// close file
													
						sprintf(txtfilename,"C:/data_%d.txt",file_count);						// text file name
						fp=fopen(txtfilename,"w+");												// open file to create
						column_count=0;														    // column counter initializing
						break;
			}
	}

void video_control_board(void)
	{	
		cvNamedWindow("VideoControlBoard",1);									// create window for the control panel
		cvResizeWindow("VideoControlBoard",300,220);							// Resize the window (300,185)
		cvMoveWindow("VideoControlBoard",x_pant-300,0);							// move the window to a desired position on the screen
		cvCreateTrackbar("cycle time","VideoControlBoard",&ts,300);				// cycle time
		cvCreateTrackbar("kwait","VideoControlBoard",&kwait,300);				// kwait
		cvCreateTrackbar("filter_p","VideoControlBoard",&filter_i,9);			// filter parameter
		cvCreateTrackbar("thresh bw","VideoControlBoard",&thresh,255);			// threshold B&W
		cvCreateTrackbar("N_aprox","VideoControlBoard",&N_aprox,30);			// contour approximation parameter	
	}

void start_program(int i) //initialize variables according to the option chosen
	{	
		cvInitFont(&text_font,CV_FONT_HERSHEY_SIMPLEX,1,1,0,2,8);		// text font initialization
		x_pant=GetSystemMetrics(SM_CXSCREEN);							// obtaining screen width [px]
		y_pant=GetSystemMetrics(SM_CYSCREEN);							// obtaining screen heigh [px]

		switch(i)
			{
				case 0: capture=cvCreateFileCapture("C:/FlightVideo_17_06_2014__18_19_27.avi");	// get video from a file
						break;

				case 1:	capture=cvCreateCameraCapture(0);										// get video from the webcam
						break;
				
				case 2:	if (!ardrone.open()) {printf("Failed to initialize.\n"); return;}		// initialize Ar Drone
						ardrone.setCamera(1); msleep(500);										// initialize bottom camera
						break;

				case 3: break;																	// initialize nothing for the option 3, working with image file
			}
	}

void upload_image(int i) // upload image
	{	
		switch(i)
			{
				case 0: image=cvQueryFrame(capture);		// get image from video file
						break;

				case 1:	image=cvQueryFrame(capture);		// get image from the webcam
						break;
				
				case 2:	image=ardrone.getImage();			// get image from the ArDrone			 
						break; 
				
				case 3: image=cvLoadImage( "C:/prueba_4_1.jpg");	// get image from the image file		
						break;
			}
	}

void tomar_foto(void)  // toma foto
	{
		msleep(300);	
		sprintf(photoname,"C:/photo_%d.jpg",photo_count);		
		cvSaveImage(photoname,image);
		photo_count=photo_count+1;
	}

void switch_camera(int x)
{ 
	ardrone.setCamera(x);
}

void switch_land(int x)
{ 
	// if (x==1 && ardrone.onGround()) ardrone.takeoff();  // despuegue
	// if (x==0 && !ardrone.onGround()) ardrone.landing();	// aterrice
}

void switch_pitch(int x)
{ 
    if (x==0)   pitch_in=-1.0;
	if (x==1)   pitch_in= 0.0;
	if (x==2)   pitch_in= 1.0;
    if (TB_move_3d==0) pitch_in= 0.0;
}

void switch_roll(int x)
{ 
    if (x==0)   roll_in=-1.0;
	if (x==1)   roll_in=0.0;
	if (x==2)   roll_in=1.0;
	if (TB_move_3d==0) roll_in=0.0;
}

void switch_vz(int x)
{ 
    if (x==0)   vz_in=-1.0;
	if (x==1)   vz_in= 0.0;
	if (x==2)   vz_in= 1.0;
	if (TB_move_3d==0) vz_in= 0.0;
}

void switch_vr(int x)
{ 
    if (x==0)   vr_in=-1.0;
	if (x==1)   vr_in= 0.0;
	if (x==2)   vr_in= 1.0;
	if (TB_move_3d==0) vr_in= 0.0;
}

void switch_on(int x)
{ 
	if (x==0)   
		{	pitch_in = 0.0; roll_in = 0.0; vz_in = 0.0; vr_in = 0.0;
			TB_pitch_angle=1; 
			TB_roll_angle=1;
			TB_vz=1;
			TB_vr=1;
		}
}

void controles(void)
	{	
		cvNamedWindow("controles",1);											// crear ventana imagen
		cvResizeWindow("controles",300,350);									// propiedad cambiar tamaño de la ventana
		//cvMoveWindow("controles",407,0);										// propieda mover ventana a punto (x,y) de la pantalla
		cvCreateTrackbar("Camera","controles",&TB_camera,1,switch_camera);		// camara
		cvCreateTrackbar("Landing","controles",&TB_landing,1,switch_land);		// take off / landing
		cvCreateTrackbar("< Pitch","controles",&TB_pitch_angle,2,switch_pitch);	// <pitch
		cvCreateTrackbar("< Roll","controles",&TB_roll_angle,2,switch_roll);	// <roll
		cvCreateTrackbar("Vz","controles",&TB_vz,2,switch_vz);					// vz
		cvCreateTrackbar("Vr","controles",&TB_vr,2,switch_vr);					// vr
		cvCreateTrackbar("Move3D","controles",&TB_move_3d,1,switch_on);			// move 3d
	}


void start_video(void)
	{
		GetLocalTime(&file_date);
		sprintf(videofilename,"C:/FlightVideo_%02d_%02d_%d__%02d_%02d_%02d.avi",file_date.wDay,file_date.wMonth,file_date.wYear,file_date.wHour,file_date.wMinute,file_date.wSecond);
		video=cvCreateVideoWriter(videofilename,CV_FOURCC('D','I','V','X'),30,cvGetSize(image));
	}


void record_video(void)
	{
		cvWriteFrame(video,image);
	}

void start_edition(void)
	{	
		// Tamaño de la imagen
		size_image=cvGetSize(image);
		x_ima=size_image.width/2;
		y_ima=size_image.height/2;
		// Imagenes de Edicion
		hsv=cvCloneImage(image);
		b_w1=cvCreateImage(cvGetSize(image),IPL_DEPTH_8U,1);
		grayscale=cvCreateImage(cvGetSize(image),IPL_DEPTH_8U,1);
		Equali=cvCreateImage(cvGetSize(image),IPL_DEPTH_8U,1);
		b_w2=cvCreateImage(cvGetSize(image),IPL_DEPTH_8U,1);
		filter_1=cvCreateImage(cvGetSize(image),IPL_DEPTH_8U,3);
		edges=cvCreateImage(cvGetSize(image),image->depth,1);
		I_contours=cvCreateImage(cvGetSize(image),IPL_DEPTH_8U,1);
		I_contours_aprox=cvCreateImage(cvGetSize(image),8,3);
		I_contours_analy=cvCreateImage(cvGetSize(image),8,3);

		affine_t=cvCloneImage(b_w2);
		affine_t->origin=b_w2->origin;
		cvZero(affine_t);
		// Source Triangle
		srcTri[0].x=(image->width*0)-1;		srcTri[0].y=(image->height*0)-1;
		srcTri[1].x=(image->width*1)-1;		srcTri[1].y=(image->height*0)-1;
		srcTri[2].x=(image->width*0)-1;		srcTri[2].y=(image->height*1)-1;
		// Destination Triangle
		dstTri[0].x=image->width*1;			dstTri[0].y=image->height*0;
		dstTri[1].x=image->width*0;			dstTri[1].y=image->height*0;
		dstTri[2].x=image->width*1;			dstTri[2].y=image->height*1;
		// WarpMatrix 
		cvGetAffineTransform(srcTri,dstTri,warp_mat);


		//	// Y				// X
		//	1. 0*(y_ima+39)		1. 0*(x_ima+17)
		//	2. 1*(y_ima+39)		2. 1*(x_ima+17)
		//	3. 2*(y_ima+39)		3. 2*(x_ima+17)
		//	4. 3*(y_ima+39)		4. 3*(x_ima+17)


		// ((Ventana Original))
		cvNamedWindow("Original",0);
		//cvCreateTrackbar("ts", "Original", &ts, 200);
		cvResizeWindow("Original",x_ima,y_ima);
		cvMoveWindow("Original",0*(x_ima+17),0*(y_ima+39));

		// ((Ventana Filtros)) 
		cvNamedWindow("Filtros",0);
		//cvCreateTrackbar("ite","Filtros",&ite,255);
		cvResizeWindow("Filtros",x_ima,y_ima);
		cvMoveWindow("Filtros",0*(x_ima+17),1*(y_ima+39));

		// ((Ventana Grises))
		cvNamedWindow("Grises",0);
		cvResizeWindow("Grises",x_ima,y_ima);
		cvMoveWindow("Grises",0*(x_ima+17),2*(y_ima+39));

		// ((Ventana B&W grises)) 
		cvNamedWindow("B&W_Grises",0);
		//cvCreateTrackbar("umbral","B&W_Grises",&umbral,255);
		cvResizeWindow("B&W_Grises",x_ima,y_ima);
		cvMoveWindow("B&W_Grises",1*(x_ima+17),0*(y_ima+39));

		// ((Ventana Contours))
		cvNamedWindow("W_Contours",0);
		cvResizeWindow("W_Contours",x_ima,y_ima);
		cvMoveWindow("W_Contours",1*(x_ima+17),1*(y_ima+39));

		// ((Ventana Contours_Aprox))
		cvNamedWindow("W_Contours_Aprox",0);
		//cvCreateTrackbar("N_aprox","W_Contours_Aprox",&N_aprox,30);
		cvResizeWindow("W_Contours_Aprox",x_ima,y_ima);
		cvMoveWindow("W_Contours_Aprox",1*(x_ima+17),2*(y_ima+39));

		// ((Ventana Contours_Analy))
		cvNamedWindow("W_Contours_Analy",0);
		cvResizeWindow("W_Contours_Analy",x_ima,y_ima);
		cvMoveWindow("W_Contours_Analy",2*(x_ima+17),0*(y_ima+39));

		// ((Ventana HSV))
		//cvNamedWindow("HSV",CV_WINDOW_AUTOSIZE);
		//cvResizeWindow("HSV",x_image,y_image);
		//cvMoveWindow("HSV",0,0);

		// ((Ventana B&W colores))
		//cvNamedWindow("B&W_binalized_Colours",CV_WINDOW_AUTOSIZE);
		//cvCreateTrackbar("minH","B&W_binalized_Colours",&minH,255);
		//cvCreateTrackbar("maxH","B&W_binalized_Colours",&maxH,255);
		//cvCreateTrackbar("minS","B&W_binalized_Colours",&minS,255);
		//cvCreateTrackbar("maxS","B&W_binalized_Colours",&maxS,255);
		//cvCreateTrackbar("minV","B&W_binalized_Colours",&minV,255);
		//cvCreateTrackbar("maxV","B&W_binalized_Colours",&maxV,255);
		//cvResizeWindow("B&W_binalized_Colours",x_ima,y_ima);
		//cvMoveWindow("B&W_binalized_Colours",0,y_ima+39);

		// ((Ventana Histogram Equalization))
		//cvNamedWindow("Equalization",1);
		//cvResizeWindow("Equalization",x_ima,y_ima);
		//cvMoveWindow("Equalization",0,2*(y_ima+39));

		// ((Ventana Bordes))
		//cvNamedWindow("Bordes_Canny",CV_WINDOW_AUTOSIZE);
		//cvCreateTrackbar("tresh_1","Bordes_Canny",&canny1,255);
		//cvCreateTrackbar("tresh_2","Bordes_Canny",&canny2,255);
		//cvResizeWindow("Bordes_Canny",x_ima,y_ima);
		//cvMoveWindow("Bordes_Canny",x_ima+17,0);

		// ((Ventana Affine Transform))
		//cvNamedWindow("Affine Transform",1);

		video_control_board();											// iniciar controles
	}

void editar_imagen(void)
	{
		// HSV	
		//cvCvtColor(image,hsv,CV_RGB2HSV_FULL);
		//cvShowImage("HSV",hsv);

		// Black and White with Binalized
		//lower=cvScalar(minH, minS, minV);
		//upper=cvScalar(maxH, maxS, maxV);
		//cvInRangeS(image, lower, upper, b_n1);
		//cvShowImage("B&W_binalized_Colours",b_n1);

		// Filtro a Image
		cvSmooth(image,filter_1,CV_GAUSSIAN,filter_i*2+1,filter_i*2+1);
		//cvSmooth(image,filter_1,CV_BLUR,5,3);
		//cvSmooth(image,filter_1,CV_GAUSSIAN,31,0);
		//cvSmooth(image,filter_1,CV_MEDIAN,31,0);
		//cvErode(image,filter_1,NULL,ite);		// (Negros)probar estos dos Realzan los bordes un poco
		//cvDilate(image,filter_1,NULL,ite);	// (Blancos)probar estos dos Realzan los bordes un poco
		cvShowImage("Filtros",filter_1);

		// Grises
		cvCvtColor(filter_1,grayscale,CV_RGB2GRAY);
		cvShowImage("Grises",grayscale);

		// Histogram Equalization
		//cvEqualizeHist(grises,Equali);
		//cvShowImage("Equalization",Equali);

		// Convertir de grises a blanco y negro
		cvThreshold(grayscale,b_w2,thresh,255,CV_THRESH_BINARY); 
		cvShowImage("B&W_Grises",b_w2);

		// Contours
		cvZero(I_contours);
		cvZero(I_contours_aprox);
		cvZero(I_contours_analy);
		Nc=cvFindContours(b_w2,g_storage,&contours_origi,sizeof(CvContour),CV_RETR_LIST,CV_CHAIN_APPROX_SIMPLE,cvPoint(0,0));  // Numero de Contornos
		if(contours_origi)
			{	cvDrawContours(I_contours,contours_origi,white,white,1,1,16);
				cvShowImage("W_Contours",I_contours);
				contours_aprox=cvApproxPoly(contours_origi,sizeof(CvContour),g_storage,CV_POLY_APPROX_DP,N_aprox,1); // penultimo parametro de aproximacion, es una aproximación de precisión deseado.
				contours_analy=contours_origi;
				contours_copy=contours_origi;
				cvDrawContours(I_contours_aprox,contours_aprox,red,blue,1,1,16);
				cvShowImage("W_Contours_Aprox",I_contours_aprox);
			}
		//printf( "No.Contour:%d \n",Nc);


		// Caracterizacion
		// Condicionar por Lados Iguales y convexo
		// Condicionar por area en pixeles (< Mayor a __)
		// Encuentro unidad de area (cm/px)
		// Condicionar por area en valor real

		while(contours_aprox)
			{	
				area=cvContourArea(contours_aprox);   // obtengo area de contorno
				square_1=cvMinAreaRect2(contours_aprox,0);		// aproxima a cuadro y obtengo (centro,tamaño,angle)
			
				if(contours_aprox->total==4 && cvCheckContourConvexity(contours_aprox) && area>800)   //area>1800
					{	
						if (square_1.size.height>0.9*square_1.size.width && square_1.size.height<1.1*square_1.size.width)
							{	
								rate3=10/square_1.size.width;				// relacion [cm/px] con referencia 
								//if(option==2){ratio=(1/ratio2)*100;}	// relacion [cm/px] con Altura
								real_area=area*rate3*rate3;				// [(px^2)*(cm/px)*(cm/px)]

								if (real_area>70 && real_area<120)		// discrimino area real [100 cm^2]
									{	
		
										// Dibujo circulo
										pt1=cvPoint(square_1.center.x,square_1.center.y);
										cvCircle(I_contours_analy,pt1,3,white,2,1);
										cvDrawContours(I_contours_analy,contours_aprox,red,blue,-1,1,16);  // antepenultimo parametro (-1) negativo me grafica solo el contorno donde se encuentra
										cvShowImage("W_Contours_Analy",I_contours_analy);


	


										N_circles=0;
										contours_analy=contours_copy;
										while(contours_analy)
											{  	
												if(cvContourArea(contours_analy)<500)
													{	
														circle_position=CV_GET_SEQ_ELEM(CvPoint,contours_analy,0);			// Obtengo el primer punto del contorno
														dist_pts=sqrt(pow(circle_position->x-square_1.center.x,2)+pow(circle_position->y-square_1.center.y,2));
															
														// Puntos DADO
														//if ((interior->x < Xmax)&&(interior->x > Xmin)&&(interior->y < Ymax)&&(interior->y > Ymin)&&(dist_pts<0.6*caja.size.height))
														if (dist_pts<0.6*square_1.size.height) 
															{	
																printf("dist:%2.2f[%%] \n",dist_pts*100.0/square_1.size.height);
																//cvWaitKey(0);	
																N_circles++;
															}
														// Punto Orientacion
														else
															{
																if (dist_pts<1.3*square_1.size.height)
																	{
																		square_2=cvMinAreaRect2(contours_analy,0);
																		pt1=cvPoint(square_2.center.x,square_2.center.y);
																		cvCircle(image,pt1,3,blue,2,1);

																		angulo=atan2((square_1.center.x-square_2.center.x),(square_2.center.y-square_1.center.y))*RAD_TO_DEG;
																		sprintf(text_1,"Angle:%2.0f ",angulo);
																		text=text_1;
																		pt2=cvPoint(square_1.center.x,square_1.center.y+25);
																		cvPutText(image,text,pt2,&text_font,green);
																	}
															}
															
													}
												contours_analy=contours_analy->h_next;
											}

										// escribo en imagen (N_dado)
										//sprintf(text_1,"No. %d Angle:%2.2f",N_dado,caja.angle);
										sprintf(text_1,"N. %d",N_circles);
										text=text_1;
										pt2=cvPoint(square_1.center.x,square_1.center.y);
										cvPutText(image,text,pt2,&text_font,red);
										//cvWaitKey(0);



									}
							}
					}
				contours_aprox=contours_aprox->h_next;
			}


		//// Procesamiento (filtros)
		////cvSmooth(image,filter_1,CV_GAUSSIAN,31,0);
		////cvSmooth(image,filter_1,CV_BLUR,31,0);
		////cvSmooth(image,filter_1,CV_GAUSSIAN,31,0);
		////cvSmooth(image,filter_1,CV_MEDIAN,31,0);
		////cvErode(image,filter_1,NULL,ite);	// (Negros)probar estos dos Realzan los bordes un poco
		//cvDilate(image,filter_1,NULL,ite);	// (Blancos)probar estos dos Realzan los bordes un poco
		//cvShowImage("Filtros",filter_1);

		//// Bordes Canny
		//cvCanny(image,bordes,canny1,canny2,3); 
		//cvShowImage("Bordes_Canny",bordes);

		////Affine Transform
		//cvWarpAffine(image,affine_t,warp_mat);						// realiza transformacion paralelogramo
		//cvShowImage("Affine Transform",affine_t);
		//cvWarpAffine(affine_t,affine_t,rot_mat);					// realiza transformacion rot and scale
		//cvShowImage("Affine Transform2",affine_t);
	}
// %%%%%%%%%%%%%%%%%%%%%%
// %%%%%%%  MAIN  %%%%%%%
// %%%%%%%%%%%%%%%%%%%%%%
void main(void)
{ 
	option=1;				// (0)video_file (1)webcam (2)Ar.Drone (3)image_file
	band_edition_1=1;		// Editar (0)OFF (1)ON
	start_program(option);		// inicializa   
	write_txt(0);			// crea archivo .txt
	upload_image(option);	// upload image
	if(band_edition_1==1) start_edition(); 


	size_image=cvGetSize(image);

    while (!GetAsyncKeyState(VK_ESCAPE)) 
		{	cvWaitKey(kwait+1);											// espera para mover imagen			
			cvShowImage("Original", image);								// mostrar original
			upload_image(option);										// upload image
			if (option==0 && image==NULL) return;						// cerrar cuando acabe el video
			if(band_edition_1==1) editar_imagen();
			

			if (option==2)
				{	if(!ardrone.update()) break;
					pitch_out=ardrone.getPitch()*RAD_TO_DEG;
					roll_out=ardrone.getRoll()*RAD_TO_DEG;
					yaw_out=ardrone.getYaw()*RAD_TO_DEG;
					altitude_out=ardrone.getAltitude();
					speed_out=ardrone.getVelocity(&vx_out,&vy_out,&vz_out);
					battery=ardrone.getBatteryPercentage();

					// motion ArDrone
					pond=0.4;
					ardrone.move3D(pitch_in*pond,roll_in*pond,vz_in*pond,vr_in*pond);

					// Escribir Altura & Puntos de Referencia
					sprintf(text_1,"Altitude: %2.2f [m]",altitude_out);
					text=text_1;
					pt2=cvPoint(size_image.width-300,size_image.height-20);
					cvPutText(image,text,pt2,&text_font,red);
					ref=cvPoint(size_image.width/2,size_image.height/2);
					rate1=(52.663*altitude_out+1.2546)/100;	// [m] metros en la imagen segun altura (( CAMBIAR ECXEL ))
					rate2=360/rate1;						// [px/m] relacion segun la altura
					correct_ref=cvPoint((size_image.width/2)+int(altitude_out*tan(roll_out*DEG_TO_RAD)*rate2),(size_image.height/2.0)-int(altitude_out*tan(pitch_out*DEG_TO_RAD)*rate2)); // correccion de posicion 
					//cvCircle(image,ref,2,blue,5,8);				// referencia sin correccion
					//cvCircle(image,correct_ref,2,black,5,8);	// referencia con correccion


					// escribo 2 referencias
					sprintf(text_1,"R1:%2.2f R2:%2.2f [cm/px]",rate3,((1/rate2)*100));
					text=text_1;
					pt2=cvPoint(size_image.width-420,size_image.height-60);
					//cvPutText(image,text,pt2,&font1,red);

				}

			else
				{
					//printf("T:%2.2f   TsR:%d   TcR:%d \n",(float)count_time/1000.0,diff_1,diff_2);
				}
			

			if (option==2 && cvGetWindowProperty("controles",1)==-1) controles();	// si no esta ventana de control (abrirla)
			if (band_edition_1==1 && cvGetWindowProperty("VideoControlBoard",1)==-1) video_control_board();
				

			if (GetAsyncKeyState('S') && option!=2) {msleep(50); cvWaitKey(0);}		// pausar
			if (GetAsyncKeyState('P')) tomar_foto();								// tomar foto					
			if (GetAsyncKeyState('R')){if(flag1_video==0){start_video();flag1_video=1;}flag2_video=1;} if (flag2_video==1) record_video(); // tomar video
			
			
			write_txt(1);															// escribe en archivo (.txt)
			if (column_count==300){write_txt(2);}									// cambiar a nuevo (.txt) cada 300 columnas
			ts_control();															// time control
		}

	cvReleaseCapture(&capture);
	ardrone.landing();
	ardrone.close();
	fclose(fp);
	cvReleaseImage(&affine_t);
	cvReleaseMat(&rot_mat);
	cvReleaseMat(&warp_mat);
    cvReleaseVideoWriter(&video);
}